



----------------------------------- class 3/28 -----------------------------------

DRY - don't repeat yourself

There are usually a lot of ways to do something.
Do it as best you know how OR how your organization tells you to


user story:

someone creates a scenario and we have to build it out
eg. "as a user I want to be able to create a grocery list that I can check a box whenever
I put that item in my basket."
old project - waterfall, list everything and do it
user story - agile - sprints priority oriented vs task oriented

can be pretty vague

href = hyper-text reference


Alt text is good if your image doesn't load, but it also helps boost your page
because search engines pay attention to the alt text

Alt helps whatever you are making get found.

Tables:

Table head <thead>
    Table Row <tr>
        Column header <th>

Table body <tbody>
    Table row <tr>
        Table data <td>


----------------------------------- class 3/31 -----------------------------------

you can put a <style> </style> tag in the HEADER to put all your css styling in to your
same document, but it isn't really recommended.

whiteboard stuff and then enter it in to check yourself. this is a good way to practice and learn.




----------------------------------- class 4/4 -----------------------------------


HTML has several containers that you can place elements inside of.
They all have the same effect, but the different labels makes readability easier.
            Here are the containers we discussed in class:

            - nav
            - header
            - footer
            - section
            - article
            - aside
            - div
            - footer

Make sure you use the appropriate container.
For instance, your header should be placed inside of the <header> element.
A navigation menu should be placed inside the <nav> container.
Advertisements or extra info on your site should be placed in an <aside>.



CSS cheat sheet:

Element
  css = element
Class
  css = .class
ID
  css = #id



General idea is that there are 12 columns wide on a page


----------------------------------- class 4/7 -----------------------------------

Aprentee program
    https://apprenticareers.org/
    assessment test - interviews - bootcamp (not paid) - job

Viewer for your code:
    https://repl.it/


Can test javascript in browser console!!!!!!

an array is a datastore, can call function from inside (only in javascript)

scope -- kind of inception like how things can affect other things



Git:
ACP = add commit push

-------------------------------------------------------
basic javascript function:

        var nums = 5 + 5


        function doNumberStuff(num){
        return nums;
        }

        console.log(doNumberStuff())



----This retuns whatever you put in +1:

        var nums = 6;

        function doNumberStuff(num){
        return nums + 1;
        }

        console.log(doNumberStuff(nums))

------------------------------------
  JavaScript lesson structure:

-In order to understand web development, it is essential to understand the basic principles of programming.


What is a program?

-"A list of computer instructions that tell a computer what to do."


What is JavaScript?

- The language was introduced in 1995 and used to create programs in Netscape (Netscape was a browser similar to Google Chrome and Internet Explorer).

- Not to be confused with Java.  JavaScript has almost nothing to do with Java except that they're both programming languages.


JS has 6 data types
	1) numbers
	2) strings
	3) Booleans (true or false values, can use in conditional statements)
	4) objects (EVERYTHING is an object in javascript)
	5) functions
	6) undefined


Technical career paths

SDET - (Software Design Engineer in Test) write code to test features.They have to be
       good at both coding and testing.

SDE - Software Design Engineer

Product (and Program) Management - these roles vary. Generally are at least partially
                                   client facing. Sometimes also involve coding.

<!-- Use classes and IDs to style your resume page -->
<!-- Go back to your profile that you created and align items. Use each of the 3 alignments at least once. -->
<!-- Go to http://www.imdb.com/chart/top?ref_=nv_mv_250_6
	Create a table with 3 rows about the top 3 movies. The table should contain 3 columns containing the following: movie name, year, rating.
-->
<!-- Update your profile with the correct containers

---------------------------------------



******  modulous function *****

example:
        function doNumberStuff(numbs){
        return numbs + 1;
        }

        var numbs = function (a,b){
        return a + b;
        }

        console.log(doNumberStuff(numbs(4,5)))



NAN = not a number

Math.random() returns a random floating point value between 0 and 1


the below will return a random whole number between 0 and 100

function random (num){
  return Math.round(Math.random() * num);
}
random (100);


function multiplyround (num,num2){
  return Math.floor (num * num2);
}
multiplyround (52,0.8888);



function remainder (num,num2){
  return (((num / num2) - Math.floor(num / num2))*num2)
}

remainder (5,2);



javascript terminology:

Parameters are variables in a function definition that represent data we can input into the function.
 inputNumber is a parameter, but when we call multiplyByThirteen(9), the 9 is called an argument. In other words, arguments are provided when you call a function, and parameters receive arguments as their value. When we set the value 9 as the argument, we pass a value to the function.
block = anything within { }

A function declaration is a function that is bound to an identifier or name.
  Function declarations require the keyword function, a name, and a function body. You can identify this by the use of function square() and the {} below. Function declarations do not end in a semi-colon.





-------------------------------- 4/11 -------------------------------
javaScript cont.


codeWars to prepare for interviews
  TeamEverythingIsAwesome
  sort population
  language; my languages
  status approved
  progress: i have not trained on
  dificulty 8kyu


best practice single quotes in javascript, double quotes in HTML
\ escape character
str = string

new line: \n
concatenation: + (remember, there won't be a space in between! add one if needed!)

typeof operator: tells you what kind of thing it is
eg. typeof(3); will return number
eg. typeof('3'); will return string

(()) is an object.
({}) is also an object, but it's kind of supposed to be an array


        operators:
        function operate () {
          return 4 == '4';
        };
        operate();

        returns true


    Operators:
deep equals === is exactly the same, including the type
== checks ignoring 'type of'
!= not the samee
!== not the same, including the type
< less
> greater
<= less than or equal
>= greater than or equal
% modulous (remainder)
/ divide
+ add or concatenate
- subtract
&& both true
|| either true
++ add one
-- subract one
+= add whatever to itself
-= subract whatever to itself



lexical order - js assigns numbers to string values

function blabla () {
return 'cardi b'.length;
 }
    returns a length of 7 (includes spaces)

javascript will treat a 'number' as a string with a +
but it will treat a 'number' as a number with a -


modulous operator again!
mod gives you remainder!!!!!!

        function mod () {
          return 4%4 === 0;
        }

        mod ();

        returns true

------------------------------------- 4/14 ------------------------

javascript has key words to watch out for


let (can change)
var (can change)
const (don't change ever)

var firstName = 'marisha';
console.log (firstName);
would return 'marisha'



alert = makes a pop-up
confirm = pop-up with cancel or OK
prompt = a pop-up with a type-in area


eg let coolCat = prompt ('who is the coolest cat');
   // user enters the info
console.log (coolCat);
   // would return whatever the user entered!

DOM = document object model ****************

installable app called powermode, lol

node runs inside your console if you want



objects and how to use them ............

let projector = {}
projector.brand = "ViewSonic";
projector.cost = 5;
projector.lense = "clear";
projector.isAvailable = false;

console.log(projector);
// {brand: 'ViewSonic', cost:5, isAvailable:false, lens:'clear'}
// => undefined

function howMuch(warehouseItem) {

}




let projector = {}
projector.brand = "ViewSonic";
projector.cost = 5;
projector.lense = "clear";
projector.isAvailable = false;


function howMuch(warehouseItem) {
  return warehouseItem.cost;
}

howMuch (projector);

//returns 5


to change the cost:
projector.cost = 6;
console.log(projector) //just to check





dot notation (like above)
can also use bracket notation []

key value pair ??? is the projector.cost essentially

projector['size'] = 12;
would add that in to the mix when returning the whole projector to check it



microsoft leap program



--------------------------------4.18------------------------------

objects again, concat a numbe practice
see 4.18file


arrays. In an array, you always start at zero. ALWAYS. STARTS AT ZERO.
0, 1, 2, 3, 4, etc

var contactList = ['Sadie','Fuzz lightyear','Coda'];
var nums = [3, 2, 5, 8];


so
console.log(contactList[2]) would return 'Coda'


to add to it:
contactList.push('swag');

will return 4 because now there are 4 items,
but still 3 positions

            .push adds it to the END of the string.

            .unshift adds it to the FRONT of the string (now in position zero)

            .shift REMOVES the FRONT of the string

            .pop REMOVES the LAST item of the string


            .splice(num1, num2) cuts out between those two numbers



/////////////////////////////////

//arrays. In an array, you always start at zero. ALWAYS. STARTS AT ZERO.
//0, 1, 2, 3, 4, etc

var contactList = ['Sadie','Fuzz lightyear','Coda'];
var nums = [3, 2, 5, 8];

//to add to it:
contactList.push('swag');

//will return 4 because now there are 4 items,
//but still 3 positions

console.log(contactList);

contactList.unshift('Mr. T');

console.log(contactList);

////////////

make a grocery list


-------------------------------------------

scope:
global vs local

let printCar = function(){
  var car = 'honda';
  console.log(car);
}

in this case, the variable 'car' can ONLY be accessed within the variable. it is local to printCar

let spaceShip = 'the enterprise';

in this case, we can access spaceShip from anywhere, including in any other variables. the scope is global.


bad syntax can cause things to be 'out of scope' and not within the correct place


command option escape / control alt delete
get out of an infinite loop!


/*
alert(1);
alert(2);
alert(3);
alert(4);
alert(5);
*/

//lots of manual labor

var count = 0;

while (count <= 5) {
  alert(count);
  count = count + 1;
}

//much better because you can expand it as needed and it's more succinct


------------- 4/21 ---------------

example of good synax on an even or odd check


function even_or_odd (nums){
  if (nums%2 === 0) {
    return 'Even';
  }
  else if (nums%2 === 1) {
    return 'Odd';
  }
  else return Error('enter a number')
}
even_or_odd ('45')




Remove first and last:
      // original solution
      function removeChar(str){
        let myArray = str.split ('');
        myArray.shift(myArray);
        myArray.pop(myArray);
        return myArray.join('');
      };
      removeChar('eloquent');
      //solution after I did a bit more research
      function removeChar(str){
      let newString = str.slice(1,str.length-1);
      return newString;
      };
      removeChar('eloquent');
      // Is everything still too much on one line?


Thomas' solution:
      function removeFirstAndLast (word){
        var wordsArr = []
        for (var i = 1; i < word.length; i++){
          wordsArr.push(word[i]);
        }
        return wordsArr.join('')
      }

      removeFirstAndLast('elephant')


Your solution was great, this is another way to do it, but just a few more classes to learn



This week's assignment is to create a guessing game!

when someone gets a question wrong - one image
when someone gets a question right - different image


10 questions!




-------------------------- 4/25 ----------------------------

start with kata: opposite number

additional operators.
++ adds one
-- subracts one (decrement)


var salary = 90000;
var bonus = 500;

salary = salary + bonus;
is the same as
salary += bonus;



========= while loops ============

              var num = 0;

              while (num <= 10) {
                console.log(num);
                num++;
              }


do while

pretty much never used.
do (
  //some task
) while (condition);


var num2 = 0;

do (
  console.log (num2);
  num2++;
) while (num2 <= 10);


--- quick sort - you watched a thing about this, remember?



========= for loops =============
"for loops are awesome"

    (count; condition; increase/decrease)
    often used:
    i = itteration

            for (var i = 0; i <= 10; i++) {
              console.log(i)
            }

this is essentially the same funciton as above

DRY = don't repeat yourself



var contacts = ['a','b','c','d']

var count = 0;
while (count < contacts.length) {
  document.write('<p>' + contacts[count] + '<p>');
  count++;
}

OR: (this isn't quite right yet)
for (var i==; i<contacts.length; i++) {
  document.write('<p>' + contacts[i] + '<p>')
}



okay so we made a function that returns the following:
#
##
###
####
#####

here is my answer:
      let hash = "";
      for (var i = 0; i < 5; i++) {
        document.write('<p>'+(hash += "#")+'</p>');
      }

and yay it was a good answer!

another answer:

  let hashTag = '';
  for (var i = 0; i <= 5; i++){
    console.log('#'.repeat(i));
  }



  ------------------------------- string manipulation with a for loop

 function stringManipulation (str) {
  let newStr = [];
    for (var i = 0; i < str.length; i++){
      newStr.push('***'+ str[i]);
    }
    return newStr.join('');
  }

  stringManipulation ('yolo');


  ------------------------------- review functions

  text editor: adam

---------

  alerts, console.log, prompts, if else statements,




  ------------------------------------ 4/28 --------------------------------------


do codewars every day!
filter by popular


once you can consistantly solve 6's, you can probably get a junior job



find smallest:
function findSmallestInt(args) {
  let smallest = args[0];
  for (var i=0; i<args.length; i++) {
  if (args[i] < smallest){
    smallest = args[i];
    }
  }
  return smallest
}


findSmallestInt ([4,7,2,6]);


----------

grow with google -- https://grow.google/developers/

beginner course, don't need to know anything

you can get in via scholarship. approx 12 hours (at least) per week

deadlines on projects, but they're fairly soft deadlines


--------------------------------------- 5/2 -------------------------------------------

push adds to end, unsift adds to start
remember, you can make your for loop go backwards too!
i=whatever.length-1, i >= 0, i--


scope.

What is scope?
The idea of scope is very simple: scope tells us where a piece of data is accessible.
There are two kinds of scope: global and local.

Global scope:
A variable with "global scope" can be accessed from anywhere in our program.

Local scope:
A variable created inside of a function has "local scope." It can only be accessed from
inside the function it was created in.


This variable has global scope because it wasn't created inside a function.
Variables that are global can be accessed from anywhere. For example, we're
Variables created within a function can only be accessed within that function
Because localVariable was created inside createLocalScope(), it can't be accessed
  outside of that function.  The below code will fail.
Scope affects not just variables, but functions as well. A function nested within
  another function can only be accessed inside of that function.


          LISTEN TO FUN FUN FUNCTION!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



function constructor!

// this is a function constructor
function myFunction(arg1, arg2) {
  this.firstName = arg1;
  this.lastName = arg2;
}

// this creates a new object
var x = new myFunction ("john", "doe");
x.firstName;


      /*
      IN CLASS ASSIGNMENT

      Steps:
      1. Create a global variable.
      2. Create a global function that logs that variable.
      3. Create a function nested inside the previous function.
      4. Inside the nested function, create a variable called local;
        the value of local should be the string 'local var.'
      5. Log local var to the console.
      */


      let globalVar = "chicken soup";

      function globalFunc () {
        console.log (globalVar);
        function localFunc () {
          let localVar = "local var"
          console.log (localVar);
        }
        localFunc ();
      }

      globalFunc ();



-------------------------- 5/5 ---------------------------------

constructor functions
  object constructors
  this specifies scope

put whatever input in, it creates the object for you.



------------------- 5/9 -------------


see in-class may9 folder for a button listener and creation


angular (not going over. Interested? learn it yoself!)
we'll be doing react instead :)



new react app in users/marisha.hoza/lesson-1

load the app with:
npm start


react was created by facebook




regex = regular expression


we'll be doing react instead of _____ a-something

create react app makes the new app (this is all you have to do!)

`npm install -g create-react-app`
`create-react-app lesson-1`


              npm start
to run the app.


Currently my lesson 1 folder is in
users/marisha.hoza/lesson-1


react is a library. you can import a multitude of things. You always need
import React, { Component } from 'react';
at the top of every page



basically this is very useful:

        import React, { Component } from 'react';
        import logo from './logo.svg';
        import './App.css';

        class App extends Component {
          render() {
            return (
              <div className="App">
                <header className="App-header">
                  <img src={logo} className="App-logo" alt="logo" />
                  <h1 className="App-title">Welcome to React</h1>
                </header>
                <p className="App-intro">
                  To get started, edit <code>src/App.js</code> and save to reload.
                </p>
              </div>
            );
          }
        }

        export default App;



virtual DOM = puts your stuff on a page for you, without the need for html file!

most of the goodies happen in the App.js file. the render essentially IS the html file



final project will be assigned when we start node


------------------------------ 5/12 --------------------------------

use props:

components

app is a component, but now we're going to create a new component and pass something through it
component inside component


props.name

the input IS the props, the .name is how it knows how to use it




react only renders what you need to render.
angular tends to re-load the entire page when you make a change,
vs react only re-loading the changed bit



write 5 components;
each component is a separate function, you can work them in together

this is an example component:
function Welcome2(props) {
  return <h3>Welcome, {props.name2}</h3>
}



classes help separate components. we'll get there soon.


      camelCase
      ConstructorFunction
      kebab-case
      snake_Case


Play around with node! <?? react?? DO IT.

**********************************************************************
*********************** final project!! ***********************
**********************************************************************
      build portfolio/blog

      Front end:
        Navigation - component (present on all pages? just overview mountains?)
        Blog - component (TBD)
        Portfolio - component (imagination ocean)
        AboutMe - component (about me forest)
        Resume - component (work history river)

      Back end:
        CRUD Router (create read update delete)
        Blog
        Portfolio/Project
        About Me
        Resume

**********************************************************************
**********************************************************************
**********************************************************************


jsx must use "className" instead of "class"
jsx self-closing tags MUST include the slash at the end.
jsx event listeners are written in camelCase (opposed to html all lowercase)
jsx if statements DO NOT WORK
jsx conditionals instead: use the if statement outside of JSX.
jsx conditionals instead: the ternary operator.
      valuated as either "truthy" or "falsy." If x is truthy, then the entire ternary operator returns y. If x is falsy, then the entire ternary operator returns z
jsx conditionals instead: the && operator.
      works best when its a "do this or do nothing" situation rather than a "do this OR do that" situation.
use .map to make arrays into jsx elements
jsx keys - similar to IDs in that they should be unique. Does nothing you can technically see...
      use when items need to have memory (eg when they need to remember if they were checked off a list)
      or when items order might be shuffled



--------------------------- in-class 5/16 -------------------------------

javaScript class - more object oriented style. kind of a constructor

documentation is important!!!

research site hosting... so that you can actually publish your site :)
heroku - azure? - AWS?

!!!!!!!!!!!!! learn react native :) apps for your phone!! !!!!!!!!!!!!!!!!


------------------------ 5/19 --------------------
routing :)


props is magic, lol...


{this.props.name}
this is the scope, props is magic, and name is just whatever the argument in the function is


install components like:
npm install -S styled-components

the -S saves it in just that directory.



------------------------- 5/23 -------------------------

node express mango ??
  back end!! :)


json file 
preload loads data before to help speed

a json file is basically a giant array. can have a name, doesn't "need" one.




-------------- 5/26


recursion - a function that calls itself
uses built-in stacks to work (first in, last out)


eg:

function factorial(num)  
{  
    // If the number is less than 0, reject it.  
    if (num < 0) {  
        return -1;  
    }  
    // If the number is 0, its factorial is 1.  
    else if (num == 0) {  
        return 1;  
    }  
    // Otherwise, call this recursive procedure again.  
    else {  
        return (num * factorial(num - 1));  
    }  
}  

var result = factorial(8);  
document.write(result);  

// Output: 40320  




binary search trees 
singly linked lists 



-------------------------------- May 30 -------------------------
running js in your terminal:

navigate to folder 
"node whateverFileName.extension"




node
v8 is the engine that runs chrome. a google developer tood v8 and took it out of the browser. thus, node
node is a client
allows you to run js outside of a browser
it's about 5 years old now

"node developer" basically means someone who can write back-end code
node / express / something

express: a back-end routing framework

CRUD = create, read, update, delete

RESTful API = representational state transfer API (application programming interface)

want to get put post delete



node is the tool, express is the framework
express creates the API

mongo is the database side (a database side, can use any with node/express)


app on phone > route (API node/express layer. does more than route but lol not talk about that right now) 
                > database (drawns cylinder with layers) 
        done with routing IDs

design a "schema" in the node/express api layer


express cannot live without node



create file server.js
npm init 
package name
version
description
entry point
test command
git repository
keywords


npm install -S express


touch server.js (or make file however)
var express = require('express')

GIT IGNORE LINKY LINK
https://www.gitignore.io/

add .env to the git ignore file
eg react, windows, mac, linux, etc


handy dandy node documentation:
https://nodejs.org/api/index.html

handy dandy express
https://expressjs.com/


node server.js
returns party at port 3000

go to in browser:
localhost: 3000
on the page will be hey team hey!


ctrl C to exit/cancel what's running in your terminal
killall node 
will kill all things running


"dunder durname" == __dirname (two underscores)


node works in order


---------------------- june9 ---------------------------

not mongo --- PRISMA


prisma graphql
yarn

routes - CRUD (create read update delete)


ui / client/ app

feature / node (express routes) / API

REST = representational state transfer (ideally want only CRUD)

rest has one route per table


create ==>
read <==
update ==> (old route) ==> (new route)
delete ==> 


multiple tables/data need to be linked by a uniqe identifier


graph ql helps you pull only specific bits of data






relationships between models (tables, data)

eg libraries 

Books:      Authors: (can have many books)      Genres:
  title       *books (array)                    *books (many, array)
  author      name                              *authors (many)
  genre

 
one author can have many books (one to many relationship)
Everything will have a unique id


article 1:1 (one article has one author)
comments 
likes
etc




installing stuff:
go to your directory
brew install yarn
yarn --version

mkdir new folder
cd to new folder
yarn init -y (saves package.json)

yarn add graphql-yoga 



go to index.js file
(trust me, all the goodies are there!)



node src/index.js (start server)

go to localhost:4000/ in your browser :)

example:
query {
  info
}
schema tab


killall node to close



-------------------------- 6/13 ------------------------

node src/index.js

stop server with control + c (inside same)

install prisma:
yarn global add prisma@1.6.3

in app folder:
mkdir database
prisma init


change contents of prisma.yml to:

# The service name, this will be part of the endpoint of the Prisma API
service: skillsApp

# The deployment stage, this will also be part of the API endpoint
stage: dev

# Points to the file that holds your data model
datamodel: datamodel.graphql

# You can only access the API when providing JWTs that are signed with this secret
secret: mysecret123



in database:
  prisma deploy (first one)

  prisma token


restart server
  change link to link from prisma deploy

  in playground HTTP headers:
  {
  "Authorization": "Bearer __TOKEN__"
  }

  replace Bearer __TOKEN__ with token from prisma token



//run this mutation
  mutation {
    createLink(data: {
      url: "www.prisma.io"
      description: "Prisma turns your database into a GraphQL API"
    }) {
      id
    }
  }

//query this mutation
  query {
    links {
      id
      url
      description
    }
  }



pushing stuff to a new empty array is called "rubber ducking"





june 30th ------------------------------------------------



//////////// possible project schema thingy

# type User {
#   id: ID! @unique
#   name: String!
#   email: String! @unique
#   password: String!
#   blogs: [Blog!]!
#   comments: [Comment!]!
# }


# # for blog section

# type Blog {
#   id: ID! @unique
#   author: User!
#   createdAt: DateTime!
#   title: String!
#   content: String!
#   comments: [Comment!]!
#   published: Boolean! @default(value: "false")
# }

# type Comment {
#   id: ID! @unique
#   blog: Blog!
#   user: User!
#   createdAt: DateTime!
#   comment: String!
# }


# # for skill section

# type Skill {
#   skill: String!
#   level: Int!
# }


# # possible project section

# type Project {
#   image: String!
#   title: String!
#   languages: [Skill!]!
# }
